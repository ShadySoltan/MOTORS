
M7Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000336  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000003aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000079c  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000062f  00000000  00000000  00000c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000535  00000000  00000000  00001253  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001788  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000385  00000000  00000000  00001848  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d0  00000000  00000000  00001bcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001c9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 91 01 	call	0x322	; 0x322 <main>
  74:	0c 94 99 01 	jmp	0x332	; 0x332 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <MCU_INIT>:

void MCU_INIT(void)
{
	//Initialize the MCU PINs Directions
	//Init the buttons to input
	ClearBit(BUTTONS_DDR_REG,ENGINE_ON_BUTTON_PIN);
  7c:	87 b3       	in	r24, 0x17	; 23
  7e:	8e 7f       	andi	r24, 0xFE	; 254
  80:	87 bb       	out	0x17, r24	; 23
	ClearBit(BUTTONS_DDR_REG,ENGINE_INCREASE_SPEED_PIN);
  82:	87 b3       	in	r24, 0x17	; 23
  84:	8d 7f       	andi	r24, 0xFD	; 253
  86:	87 bb       	out	0x17, r24	; 23
	ClearBit(BUTTONS_DDR_REG,ENGINE_DECREASE_SPEED_PIN);
  88:	87 b3       	in	r24, 0x17	; 23
  8a:	8b 7f       	andi	r24, 0xFB	; 251
  8c:	87 bb       	out	0x17, r24	; 23
	ClearBit(BUTTONS_DDR_REG,ENGINE_OFF_BUTTON_PIN);
  8e:	87 b3       	in	r24, 0x17	; 23
  90:	87 7f       	andi	r24, 0xF7	; 247
  92:	87 bb       	out	0x17, r24	; 23
	ClearBit(BUTTONS_DDR_REG,TURBO_ON_OFF_BUTTON_PIN);
  94:	87 b3       	in	r24, 0x17	; 23
  96:	8f 77       	andi	r24, 0x7F	; 127
  98:	87 bb       	out	0x17, r24	; 23
	
	//Init LEDs Directions
	SetBit(LEDS_DDR_REG,GREEN_LED_PIN);
  9a:	84 b3       	in	r24, 0x14	; 20
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	84 bb       	out	0x14, r24	; 20
	SetBit(LEDS_DDR_REG,RED_LED_PIN);
  a0:	84 b3       	in	r24, 0x14	; 20
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	84 bb       	out	0x14, r24	; 20
	SetBit(LEDS_DDR_REG,YELLOW_LED_PIN);
  a6:	84 b3       	in	r24, 0x14	; 20
  a8:	84 60       	ori	r24, 0x04	; 4
  aa:	84 bb       	out	0x14, r24	; 20
	SetBit(LEDS_DDR_REG,AQUA_LED_PIN);
  ac:	84 b3       	in	r24, 0x14	; 20
  ae:	88 60       	ori	r24, 0x08	; 8
  b0:	84 bb       	out	0x14, r24	; 20
	
	//Init MOTOR Directions
	SetBit(MOTOR_DDR_REG,MOTOR_DIR_RIGHT_PIN);
  b2:	81 b3       	in	r24, 0x11	; 17
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	81 bb       	out	0x11, r24	; 17
	SetBit(MOTOR_DDR_REG,MOTOR_DIR_LEFT_PIN);
  b8:	81 b3       	in	r24, 0x11	; 17
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	81 bb       	out	0x11, r24	; 17
	SetBit(MOTOR_DDR_REG,MOTOR_EN_PIN);
  be:	81 b3       	in	r24, 0x11	; 17
  c0:	80 62       	ori	r24, 0x20	; 32
  c2:	81 bb       	out	0x11, r24	; 17
	
	//Init TURBO Directions
	SetBit(TURBO_DDR_REG,TURBO_DIR_RIGHT_PIN);
  c4:	81 b3       	in	r24, 0x11	; 17
  c6:	84 60       	ori	r24, 0x04	; 4
  c8:	81 bb       	out	0x11, r24	; 17
	SetBit(TURBO_DDR_REG,TURBO_DIR_LEFT_PIN);
  ca:	81 b3       	in	r24, 0x11	; 17
  cc:	88 60       	ori	r24, 0x08	; 8
  ce:	81 bb       	out	0x11, r24	; 17
	SetBit(TURBO_DDR_REG,TURBO_EN_PIN);
  d0:	81 b3       	in	r24, 0x11	; 17
  d2:	80 61       	ori	r24, 0x10	; 16
  d4:	81 bb       	out	0x11, r24	; 17
	
	//At Rest Red Led Is Lit
	SetBit(LEDS_PORT_REG,RED_LED_PIN);
  d6:	85 b3       	in	r24, 0x15	; 21
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	85 bb       	out	0x15, r24	; 21
	
	//AirDynamics Directions
	SetBit(AIR_DYNAMIC_DDR_REG,AIR1_DIR_RIGHT_PIN);
  dc:	8a b3       	in	r24, 0x1a	; 26
  de:	81 60       	ori	r24, 0x01	; 1
  e0:	8a bb       	out	0x1a, r24	; 26
	SetBit(AIR_DYNAMIC_DDR_REG,AIR1_DIR_LEFT_PIN);
  e2:	8a b3       	in	r24, 0x1a	; 26
  e4:	82 60       	ori	r24, 0x02	; 2
  e6:	8a bb       	out	0x1a, r24	; 26
	SetBit(AIR_DYNAMIC_DDR_REG,AIR1_EN_PIN);
  e8:	8a b3       	in	r24, 0x1a	; 26
  ea:	84 60       	ori	r24, 0x04	; 4
  ec:	8a bb       	out	0x1a, r24	; 26

	SetBit(AIR_DYNAMIC_DDR_REG,AIR2_DIR_RIGHT_PIN);
  ee:	8a b3       	in	r24, 0x1a	; 26
  f0:	88 60       	ori	r24, 0x08	; 8
  f2:	8a bb       	out	0x1a, r24	; 26
	SetBit(AIR_DYNAMIC_DDR_REG,AIR2_DIR_LEFT_PIN);
  f4:	8a b3       	in	r24, 0x1a	; 26
  f6:	80 61       	ori	r24, 0x10	; 16
  f8:	8a bb       	out	0x1a, r24	; 26
	SetBit(AIR_DYNAMIC_DDR_REG,AIR2_EN_PIN);
  fa:	8a b3       	in	r24, 0x1a	; 26
  fc:	80 62       	ori	r24, 0x20	; 32
  fe:	8a bb       	out	0x1a, r24	; 26
 100:	08 95       	ret

00000102 <MOTOR_START>:
}

void MOTOR_START(MOTOR_DIR_Types direction)
{
	//Set The Direction of the Motor to ready state and turn on yellow led as indicator for ready!
	if(direction == MOTOR_DIR_RIGHT)
 102:	81 11       	cpse	r24, r1
 104:	07 c0       	rjmp	.+14     	; 0x114 <MOTOR_START+0x12>
	{
		SetBit(MOTOR_PORT_REG,MOTOR_DIR_RIGHT_PIN);
 106:	82 b3       	in	r24, 0x12	; 18
 108:	81 60       	ori	r24, 0x01	; 1
 10a:	82 bb       	out	0x12, r24	; 18
		ClearBit(MOTOR_PORT_REG,MOTOR_DIR_LEFT_PIN);
 10c:	82 b3       	in	r24, 0x12	; 18
 10e:	8d 7f       	andi	r24, 0xFD	; 253
 110:	82 bb       	out	0x12, r24	; 18
 112:	08 c0       	rjmp	.+16     	; 0x124 <MOTOR_START+0x22>
	}
	else if(direction == MOTOR_DIR_LEFT)
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	31 f4       	brne	.+12     	; 0x124 <MOTOR_START+0x22>
	{
		ClearBit(MOTOR_PORT_REG,MOTOR_DIR_RIGHT_PIN);
 118:	82 b3       	in	r24, 0x12	; 18
 11a:	8e 7f       	andi	r24, 0xFE	; 254
 11c:	82 bb       	out	0x12, r24	; 18
		SetBit(MOTOR_PORT_REG,MOTOR_DIR_LEFT_PIN);
 11e:	82 b3       	in	r24, 0x12	; 18
 120:	82 60       	ori	r24, 0x02	; 2
 122:	82 bb       	out	0x12, r24	; 18
	{
		//Do Nothing
	}
	
	//Initialize the PWM and make the motor be at rest "Not rotating"
	SetBit(TCCR1A,7);
 124:	8f b5       	in	r24, 0x2f	; 47
 126:	80 68       	ori	r24, 0x80	; 128
 128:	8f bd       	out	0x2f, r24	; 47
	ClearBit(TCCR1A,6); //Clear on Compare-match Reset at OCR1A Non Inverting Mode
 12a:	8f b5       	in	r24, 0x2f	; 47
 12c:	8f 7b       	andi	r24, 0xBF	; 191
 12e:	8f bd       	out	0x2f, r24	; 47
	
	ClearBit(TCCR1A,1);
 130:	8f b5       	in	r24, 0x2f	; 47
 132:	8d 7f       	andi	r24, 0xFD	; 253
 134:	8f bd       	out	0x2f, r24	; 47
	SetBit(TCCR1A,0);
 136:	8f b5       	in	r24, 0x2f	; 47
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	8f bd       	out	0x2f, r24	; 47
	SetBit(TCCR1B,3);
 13c:	8e b5       	in	r24, 0x2e	; 46
 13e:	88 60       	ori	r24, 0x08	; 8
 140:	8e bd       	out	0x2e, r24	; 46
	ClearBit(TCCR1B,4); //Choosing 8bit FAST PWM mode
 142:	8e b5       	in	r24, 0x2e	; 46
 144:	8f 7e       	andi	r24, 0xEF	; 239
 146:	8e bd       	out	0x2e, r24	; 46
	
	SetBit(TCCR1B,0);
 148:	8e b5       	in	r24, 0x2e	; 46
 14a:	81 60       	ori	r24, 0x01	; 1
 14c:	8e bd       	out	0x2e, r24	; 46
	SetBit(TCCR1B,1);
 14e:	8e b5       	in	r24, 0x2e	; 46
 150:	82 60       	ori	r24, 0x02	; 2
 152:	8e bd       	out	0x2e, r24	; 46
	ClearBit(TCCR1B,2); //Prescale 64
 154:	8e b5       	in	r24, 0x2e	; 46
 156:	8b 7f       	andi	r24, 0xFB	; 251
 158:	8e bd       	out	0x2e, r24	; 46
	
	OCR1A = 0;
 15a:	1b bc       	out	0x2b, r1	; 43
 15c:	1a bc       	out	0x2a, r1	; 42
	
	//MOTOR is Ready!
	SetBit(LEDS_PORT_REG,YELLOW_LED_PIN);
 15e:	85 b3       	in	r24, 0x15	; 21
 160:	84 60       	ori	r24, 0x04	; 4
 162:	85 bb       	out	0x15, r24	; 21
	ClearBit(LEDS_PORT_REG,RED_LED_PIN);
 164:	85 b3       	in	r24, 0x15	; 21
 166:	8d 7f       	andi	r24, 0xFD	; 253
 168:	85 bb       	out	0x15, r24	; 21
 16a:	08 95       	ret

0000016c <MOTOR_START_BUTTON>:
	SetBit(AIR_DYNAMIC_DDR_REG,AIR2_DIR_LEFT_PIN);
	SetBit(AIR_DYNAMIC_DDR_REG,AIR2_EN_PIN);
}

void MOTOR_START_BUTTON(MOTOR_DIR_Types direction)
{
 16c:	cf 93       	push	r28
 16e:	c8 2f       	mov	r28, r24
	while(MOTOR_STATUS == 0)
 170:	0d c0       	rjmp	.+26     	; 0x18c <MOTOR_START_BUTTON+0x20>
	{
		if(GetBit(BUTTONS_PIN_REG,ENGINE_ON_BUTTON_PIN) == 1)
 172:	b0 9b       	sbis	0x16, 0	; 22
 174:	0b c0       	rjmp	.+22     	; 0x18c <MOTOR_START_BUTTON+0x20>
		{
			while(GetBit(BUTTONS_PIN_REG,ENGINE_ON_BUTTON_PIN) == 1);
 176:	b0 99       	sbic	0x16, 0	; 22
 178:	fe cf       	rjmp	.-4      	; 0x176 <MOTOR_START_BUTTON+0xa>
			MOTOR_STATUS = 1;
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 182:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			MOTOR_START(direction);
 186:	8c 2f       	mov	r24, r28
 188:	0e 94 81 00 	call	0x102	; 0x102 <MOTOR_START>
	SetBit(AIR_DYNAMIC_DDR_REG,AIR2_EN_PIN);
}

void MOTOR_START_BUTTON(MOTOR_DIR_Types direction)
{
	while(MOTOR_STATUS == 0)
 18c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 190:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 194:	89 2b       	or	r24, r25
 196:	69 f3       	breq	.-38     	; 0x172 <MOTOR_START_BUTTON+0x6>
			while(GetBit(BUTTONS_PIN_REG,ENGINE_ON_BUTTON_PIN) == 1);
			MOTOR_STATUS = 1;
			MOTOR_START(direction);
		}
	}
}
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <TURBO_BUTTON>:
	MOTOR_START_BUTTON(MOTOR_DIR_RIGHT);
}

void TURBO_BUTTON(void)
{
	if(OCR1A > 0)
 19c:	8a b5       	in	r24, 0x2a	; 42
 19e:	9b b5       	in	r25, 0x2b	; 43
 1a0:	89 2b       	or	r24, r25
 1a2:	51 f0       	breq	.+20     	; 0x1b8 <TURBO_BUTTON+0x1c>
	{
	while(GetBit(BUTTONS_PIN_REG,TURBO_ON_OFF_BUTTON_PIN) == 1);
 1a4:	b7 99       	sbic	0x16, 7	; 22
 1a6:	fe cf       	rjmp	.-4      	; 0x1a4 <TURBO_BUTTON+0x8>
	ToggleBit(TURBO_PORT_REG,TURBO_EN_PIN);
 1a8:	92 b3       	in	r25, 0x12	; 18
 1aa:	80 e1       	ldi	r24, 0x10	; 16
 1ac:	89 27       	eor	r24, r25
 1ae:	82 bb       	out	0x12, r24	; 18
	ToggleBit(TURBO_PORT_REG,TURBO_DIR_RIGHT_PIN);
 1b0:	92 b3       	in	r25, 0x12	; 18
 1b2:	84 e0       	ldi	r24, 0x04	; 4
 1b4:	89 27       	eor	r24, r25
 1b6:	82 bb       	out	0x12, r24	; 18
 1b8:	08 95       	ret

000001ba <AIR_DYN_ON_OFF>:
	}
}

void AIR_DYN_ON_OFF()
{
	if(OCR1A > 0)
 1ba:	8a b5       	in	r24, 0x2a	; 42
 1bc:	9b b5       	in	r25, 0x2b	; 43
 1be:	89 2b       	or	r24, r25
 1c0:	99 f0       	breq	.+38     	; 0x1e8 <AIR_DYN_ON_OFF+0x2e>
	{
		SetBit(AIR_DYNAMIC_PORT_REG,AIR1_DIR_RIGHT_PIN);
 1c2:	8b b3       	in	r24, 0x1b	; 27
 1c4:	81 60       	ori	r24, 0x01	; 1
 1c6:	8b bb       	out	0x1b, r24	; 27
		ClearBit(AIR_DYNAMIC_PORT_REG,AIR1_DIR_LEFT_PIN);
 1c8:	8b b3       	in	r24, 0x1b	; 27
 1ca:	8d 7f       	andi	r24, 0xFD	; 253
 1cc:	8b bb       	out	0x1b, r24	; 27
		SetBit(AIR_DYNAMIC_PORT_REG,AIR1_EN_PIN);
 1ce:	8b b3       	in	r24, 0x1b	; 27
 1d0:	84 60       	ori	r24, 0x04	; 4
 1d2:	8b bb       	out	0x1b, r24	; 27
		
		SetBit(AIR_DYNAMIC_PORT_REG,AIR2_DIR_RIGHT_PIN);
 1d4:	8b b3       	in	r24, 0x1b	; 27
 1d6:	88 60       	ori	r24, 0x08	; 8
 1d8:	8b bb       	out	0x1b, r24	; 27
		ClearBit(AIR_DYNAMIC_PORT_REG,AIR2_DIR_LEFT_PIN);
 1da:	8b b3       	in	r24, 0x1b	; 27
 1dc:	8f 7e       	andi	r24, 0xEF	; 239
 1de:	8b bb       	out	0x1b, r24	; 27
		SetBit(AIR_DYNAMIC_PORT_REG,AIR2_EN_PIN);
 1e0:	8b b3       	in	r24, 0x1b	; 27
 1e2:	80 62       	ori	r24, 0x20	; 32
 1e4:	8b bb       	out	0x1b, r24	; 27
 1e6:	08 95       	ret
	}
	else if(OCR1A == 0)
 1e8:	8a b5       	in	r24, 0x2a	; 42
 1ea:	9b b5       	in	r25, 0x2b	; 43
 1ec:	89 2b       	or	r24, r25
 1ee:	91 f4       	brne	.+36     	; 0x214 <AIR_DYN_ON_OFF+0x5a>
	{
		ClearBit(AIR_DYNAMIC_PORT_REG,AIR1_DIR_RIGHT_PIN);
 1f0:	8b b3       	in	r24, 0x1b	; 27
 1f2:	8e 7f       	andi	r24, 0xFE	; 254
 1f4:	8b bb       	out	0x1b, r24	; 27
		ClearBit(AIR_DYNAMIC_PORT_REG,AIR1_DIR_LEFT_PIN);
 1f6:	8b b3       	in	r24, 0x1b	; 27
 1f8:	8d 7f       	andi	r24, 0xFD	; 253
 1fa:	8b bb       	out	0x1b, r24	; 27
		ClearBit(AIR_DYNAMIC_PORT_REG,AIR1_EN_PIN);
 1fc:	8b b3       	in	r24, 0x1b	; 27
 1fe:	8b 7f       	andi	r24, 0xFB	; 251
 200:	8b bb       	out	0x1b, r24	; 27
		
		ClearBit(AIR_DYNAMIC_PORT_REG,AIR2_DIR_RIGHT_PIN);
 202:	8b b3       	in	r24, 0x1b	; 27
 204:	87 7f       	andi	r24, 0xF7	; 247
 206:	8b bb       	out	0x1b, r24	; 27
		ClearBit(AIR_DYNAMIC_PORT_REG,AIR2_DIR_LEFT_PIN);
 208:	8b b3       	in	r24, 0x1b	; 27
 20a:	8f 7e       	andi	r24, 0xEF	; 239
 20c:	8b bb       	out	0x1b, r24	; 27
		ClearBit(AIR_DYNAMIC_PORT_REG,AIR2_EN_PIN);
 20e:	8b b3       	in	r24, 0x1b	; 27
 210:	8f 7d       	andi	r24, 0xDF	; 223
 212:	8b bb       	out	0x1b, r24	; 27
 214:	08 95       	ret

00000216 <MOTOR_TURN_OFF>:
	ClearBit(LEDS_PORT_REG,RED_LED_PIN);
}

void MOTOR_TURN_OFF(void)
{
	ClearBit(TCCR1A,7);
 216:	8f b5       	in	r24, 0x2f	; 47
 218:	8f 77       	andi	r24, 0x7F	; 127
 21a:	8f bd       	out	0x2f, r24	; 47
	ClearBit(MOTOR_PORT_REG,MOTOR_DIR_LEFT_PIN);
 21c:	82 b3       	in	r24, 0x12	; 18
 21e:	8d 7f       	andi	r24, 0xFD	; 253
 220:	82 bb       	out	0x12, r24	; 18
	ClearBit(MOTOR_PORT_REG,MOTOR_DIR_RIGHT_PIN);
 222:	82 b3       	in	r24, 0x12	; 18
 224:	8e 7f       	andi	r24, 0xFE	; 254
 226:	82 bb       	out	0x12, r24	; 18
	ClearBit(TURBO_PORT_REG,TURBO_DIR_RIGHT_PIN);
 228:	82 b3       	in	r24, 0x12	; 18
 22a:	8b 7f       	andi	r24, 0xFB	; 251
 22c:	82 bb       	out	0x12, r24	; 18
	ClearBit(TURBO_PORT_REG,TURBO_DIR_LEFT_PIN);
 22e:	82 b3       	in	r24, 0x12	; 18
 230:	87 7f       	andi	r24, 0xF7	; 247
 232:	82 bb       	out	0x12, r24	; 18
	ClearBit(TURBO_PORT_REG,TURBO_EN_PIN);
 234:	82 b3       	in	r24, 0x12	; 18
 236:	8f 7e       	andi	r24, 0xEF	; 239
 238:	82 bb       	out	0x12, r24	; 18
	SetBit(LEDS_PORT_REG,RED_LED_PIN);
 23a:	85 b3       	in	r24, 0x15	; 21
 23c:	82 60       	ori	r24, 0x02	; 2
 23e:	85 bb       	out	0x15, r24	; 21
	ClearBit(LEDS_PORT_REG,GREEN_LED_PIN);
 240:	85 b3       	in	r24, 0x15	; 21
 242:	8e 7f       	andi	r24, 0xFE	; 254
 244:	85 bb       	out	0x15, r24	; 21
	ClearBit(LEDS_PORT_REG,YELLOW_LED_PIN);
 246:	85 b3       	in	r24, 0x15	; 21
 248:	8b 7f       	andi	r24, 0xFB	; 251
 24a:	85 bb       	out	0x15, r24	; 21
	ClearBit(LEDS_PORT_REG,AQUA_LED_PIN);
 24c:	85 b3       	in	r24, 0x15	; 21
 24e:	87 7f       	andi	r24, 0xF7	; 247
 250:	85 bb       	out	0x15, r24	; 21
	MOTOR_STATUS = 0;
 252:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 256:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	OCR1A = 0;
 25a:	1b bc       	out	0x2b, r1	; 43
 25c:	1a bc       	out	0x2a, r1	; 42
	AIR_DYN_ON_OFF();
 25e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <AIR_DYN_ON_OFF>
	MOTOR_START_BUTTON(MOTOR_DIR_RIGHT);
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	0e 94 b6 00 	call	0x16c	; 0x16c <MOTOR_START_BUTTON>
 268:	08 95       	ret

0000026a <ACTION>:
		//Do Nothing
	}
}

void ACTION(void)
{
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	00 d0       	rcall	.+0      	; 0x270 <ACTION+0x6>
 270:	cd b7       	in	r28, 0x3d	; 61
 272:	de b7       	in	r29, 0x3e	; 62
	volatile int TURN_OFF = 0;
 274:	1a 82       	std	Y+2, r1	; 0x02
 276:	19 82       	std	Y+1, r1	; 0x01
	while(TURN_OFF == 0)
 278:	4a c0       	rjmp	.+148    	; 0x30e <ACTION+0xa4>
	{
		if(OCR1A == 0)
 27a:	8a b5       	in	r24, 0x2a	; 42
 27c:	9b b5       	in	r25, 0x2b	; 43
 27e:	89 2b       	or	r24, r25
 280:	69 f4       	brne	.+26     	; 0x29c <ACTION+0x32>
		{
			ClearBit(LEDS_PORT_REG,GREEN_LED_PIN);
 282:	85 b3       	in	r24, 0x15	; 21
 284:	8e 7f       	andi	r24, 0xFE	; 254
 286:	85 bb       	out	0x15, r24	; 21
			ClearBit(TURBO_PORT_REG,TURBO_EN_PIN);
 288:	82 b3       	in	r24, 0x12	; 18
 28a:	8f 7e       	andi	r24, 0xEF	; 239
 28c:	82 bb       	out	0x12, r24	; 18
			ClearBit(TURBO_PORT_REG,TURBO_DIR_RIGHT_PIN);
 28e:	82 b3       	in	r24, 0x12	; 18
 290:	8b 7f       	andi	r24, 0xFB	; 251
 292:	82 bb       	out	0x12, r24	; 18
			ClearBit(TURBO_PORT_REG,TURBO_DIR_LEFT_PIN);
 294:	82 b3       	in	r24, 0x12	; 18
 296:	87 7f       	andi	r24, 0xF7	; 247
 298:	82 bb       	out	0x12, r24	; 18
 29a:	03 c0       	rjmp	.+6      	; 0x2a2 <ACTION+0x38>
		}
		else
		{
			SetBit(LEDS_PORT_REG,GREEN_LED_PIN);
 29c:	85 b3       	in	r24, 0x15	; 21
 29e:	81 60       	ori	r24, 0x01	; 1
 2a0:	85 bb       	out	0x15, r24	; 21
		}
		
		AIR_DYN_ON_OFF();
 2a2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <AIR_DYN_ON_OFF>
		
		if(GetBit(TURBO_PORT_REG,TURBO_EN_PIN) == 1)
 2a6:	94 9b       	sbis	0x12, 4	; 18
 2a8:	04 c0       	rjmp	.+8      	; 0x2b2 <ACTION+0x48>
		{
			SetBit(LEDS_PORT_REG,AQUA_LED_PIN);
 2aa:	85 b3       	in	r24, 0x15	; 21
 2ac:	88 60       	ori	r24, 0x08	; 8
 2ae:	85 bb       	out	0x15, r24	; 21
 2b0:	03 c0       	rjmp	.+6      	; 0x2b8 <ACTION+0x4e>
		}
		else
		{
			ClearBit(LEDS_PORT_REG,AQUA_LED_PIN);
 2b2:	85 b3       	in	r24, 0x15	; 21
 2b4:	87 7f       	andi	r24, 0xF7	; 247
 2b6:	85 bb       	out	0x15, r24	; 21
		}
		
		if(GetBit(BUTTONS_PIN_REG,ENGINE_OFF_BUTTON_PIN) == 1)
 2b8:	b3 9b       	sbis	0x16, 3	; 22
 2ba:	09 c0       	rjmp	.+18     	; 0x2ce <ACTION+0x64>
		{
			while(GetBit(BUTTONS_PIN_REG,ENGINE_OFF_BUTTON_PIN) == 1);
 2bc:	b3 99       	sbic	0x16, 3	; 22
 2be:	fe cf       	rjmp	.-4      	; 0x2bc <ACTION+0x52>
			TURN_OFF = 1;
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	9a 83       	std	Y+2, r25	; 0x02
 2c6:	89 83       	std	Y+1, r24	; 0x01
			MOTOR_TURN_OFF();
 2c8:	0e 94 0b 01 	call	0x216	; 0x216 <MOTOR_TURN_OFF>
 2cc:	20 c0       	rjmp	.+64     	; 0x30e <ACTION+0xa4>
		}
		else if(GetBit(BUTTONS_PIN_REG,ENGINE_INCREASE_SPEED_PIN) == 1)
 2ce:	b1 9b       	sbis	0x16, 1	; 22
 2d0:	0d c0       	rjmp	.+26     	; 0x2ec <ACTION+0x82>
		{
			while(GetBit(BUTTONS_PIN_REG,ENGINE_INCREASE_SPEED_PIN) == 1);
 2d2:	b1 99       	sbic	0x16, 1	; 22
 2d4:	fe cf       	rjmp	.-4      	; 0x2d2 <ACTION+0x68>
			if(OCR1A < 255)
 2d6:	8a b5       	in	r24, 0x2a	; 42
 2d8:	9b b5       	in	r25, 0x2b	; 43
 2da:	8f 3f       	cpi	r24, 0xFF	; 255
 2dc:	91 05       	cpc	r25, r1
 2de:	b8 f4       	brcc	.+46     	; 0x30e <ACTION+0xa4>
			{
				OCR1A += 51;
 2e0:	8a b5       	in	r24, 0x2a	; 42
 2e2:	9b b5       	in	r25, 0x2b	; 43
 2e4:	c3 96       	adiw	r24, 0x33	; 51
 2e6:	9b bd       	out	0x2b, r25	; 43
 2e8:	8a bd       	out	0x2a, r24	; 42
 2ea:	11 c0       	rjmp	.+34     	; 0x30e <ACTION+0xa4>
			else
			{
				//Do nothing
			}
		}
		else if(GetBit(BUTTONS_PIN_REG,ENGINE_DECREASE_SPEED_PIN) == 1)
 2ec:	b2 9b       	sbis	0x16, 2	; 22
 2ee:	0c c0       	rjmp	.+24     	; 0x308 <ACTION+0x9e>
		{
			while(GetBit(BUTTONS_PIN_REG,ENGINE_DECREASE_SPEED_PIN) == 1);
 2f0:	b2 99       	sbic	0x16, 2	; 22
 2f2:	fe cf       	rjmp	.-4      	; 0x2f0 <ACTION+0x86>
			if(OCR1A > 0)
 2f4:	8a b5       	in	r24, 0x2a	; 42
 2f6:	9b b5       	in	r25, 0x2b	; 43
 2f8:	89 2b       	or	r24, r25
 2fa:	49 f0       	breq	.+18     	; 0x30e <ACTION+0xa4>
			{
				OCR1A -= 51;
 2fc:	8a b5       	in	r24, 0x2a	; 42
 2fe:	9b b5       	in	r25, 0x2b	; 43
 300:	c3 97       	sbiw	r24, 0x33	; 51
 302:	9b bd       	out	0x2b, r25	; 43
 304:	8a bd       	out	0x2a, r24	; 42
 306:	03 c0       	rjmp	.+6      	; 0x30e <ACTION+0xa4>
			else
			{
				//Do nothing
			}
		}
		else if(GetBit(BUTTONS_PIN_REG,TURBO_ON_OFF_BUTTON_PIN) == 1)
 308:	b7 99       	sbic	0x16, 7	; 22
		{
			TURBO_BUTTON();
 30a:	0e 94 ce 00 	call	0x19c	; 0x19c <TURBO_BUTTON>
}

void ACTION(void)
{
	volatile int TURN_OFF = 0;
	while(TURN_OFF == 0)
 30e:	89 81       	ldd	r24, Y+1	; 0x01
 310:	9a 81       	ldd	r25, Y+2	; 0x02
 312:	89 2b       	or	r24, r25
 314:	09 f4       	brne	.+2      	; 0x318 <ACTION+0xae>
 316:	b1 cf       	rjmp	.-158    	; 0x27a <ACTION+0x10>
		else
		{
			//Do Nothing
		}
	}
}
 318:	0f 90       	pop	r0
 31a:	0f 90       	pop	r0
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	08 95       	ret

00000322 <main>:
#include "BitMath.h"
#include "Design_Namings.h"
#include "Func_Dec.h"

int main(){
	MCU_INIT();
 322:	0e 94 3e 00 	call	0x7c	; 0x7c <MCU_INIT>
	MOTOR_START_BUTTON(MOTOR_DIR_RIGHT);
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	0e 94 b6 00 	call	0x16c	; 0x16c <MOTOR_START_BUTTON>
	while(1){ACTION();}
 32c:	0e 94 35 01 	call	0x26a	; 0x26a <ACTION>
 330:	fd cf       	rjmp	.-6      	; 0x32c <main+0xa>

00000332 <_exit>:
 332:	f8 94       	cli

00000334 <__stop_program>:
 334:	ff cf       	rjmp	.-2      	; 0x334 <__stop_program>
